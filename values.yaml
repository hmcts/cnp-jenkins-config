# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

## Overrides for generated resource names
# See templates/_helpers.tpl
# nameOverride:
# fullnameOverride:

master:
  # Used for label app.kubernetes.io/component
  componentName: "jenkins-master"
  image: "hmcts/jenkins"
  imageTag: "latest"
  imagePullPolicy: "Always"
  imagePullSecretName:
  # Optionally configure lifetime for master-container
  lifecycle:
  #  postStart:
  #    exec:
  #      command:
  #      - "uname"
  #      - "-a"
  numExecutors: 0
  # configAutoReload requires UseSecurity is set to true:
  useSecurity: true
  # Allows to configure different SecurityRealm using Jenkins XML
  securityRealm: |-
    <securityRealm class="hudson.security.LegacySecurityRealm"/>
  # Allows to configure different AuthorizationStrategy using Jenkins XML
  authorizationStrategy: |-
     <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
       <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
     </authorizationStrategy>
  hostNetworking: false
  # When enabling LDAP or another non-Jenkins identity source, the built-in admin account will no longer exist.
  # Since the AdminUser is used by configAutoReload, in order to use configAutoReload you must change the
  # .master.adminUser to a valid username on your LDAP (or other) server.  This user does not need
  # to have administrator rights in Jenkins (the default Overall:Read is sufficient) nor will it be granted any
  # additional rights.  Failure to do this will cause the sidecar container to fail to authenticate via SSH and enter
  # a restart loop.  Likewise if you disable the non-Jenkins identity store and instead use the Jenkins internal one,
  # you should revert master.adminUser to your preferred admin user:
  adminUser: "admin"
  # adminPassword: <defaults to random>
  # adminSshKey: <defaults to auto-generated>
  # If CasC auto-reload is enabled, an SSH (RSA) keypair is needed.  Can either provide your own, or leave unconfigured to allow a random key to be auto-generated.
  # If you supply your own, it is recommended that the values file that contains your key not be committed to source control in an unencrypted format
  rollingUpdate: {}
  jenkinsAdminEmail: noreply@reform.hmcts.net
  # Ignored if Persistence is enabled
  # maxSurge: 1
  # maxUnavailable: 25%
  resources:
    requests:
      cpu: "50m"
      memory: "512Mi"
    limits:
      cpu: "2000m"
      memory: "4096Mi"
  # Environment variables that get added to the init container (useful for e.g. http_proxy)
  # initContainerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  containerEnv:
    - name: ENVIRONMENT
      value: "sandbox"
    - name: DNS_SERVER
      value: "10.99.196.9"
    - name: JENKINS_AGENT_IMAGE_URI
      value: '/subscriptions/bf308a5c-0624-4334-8ff8-8dca9fd43783/resourceGroups/cnp-vmimages-sandbox/providers/Microsoft.Compute/images/moj-centos-agent74-20190415135134'
    - name: JENKINS_AGENT_VNET
      value: 'mgmt-infra-sandbox'
    - name: JENKINS_AGENT_VNET_RG
      value: 'mgmt-infra-sandbox'
    - name: JENKINS_AGENT_SUBNET
      value: 'jenkins-subnet'
    - name: JENKINS_AGENT_EXECUTORS
      value: '4'
    - name: JENKINS_AGENT_MAX
      value: '10'
    - name: BFA_HOSTNAME
      value: sandbox-build-failure-analyzer.platform.hmcts.net
    - name: SECRETS
      value: /kvmnt/secrets
  # Set min/max heap here if needed with:
  #javaOpts: '-Djenkins.install.runSetupWizard=false -Dorg.apache.commons.jelly.tags.fmt.timeZone=Europe/London -Dhudson.model.DirectoryBrowserSupport.CSP=\"default-src ''self''; script-src ''self'' ''unsafe-inline''; style-src ''self'' ''unsafe-inline''; font-src data:\"'
  # jenkinsOpts: ""
  # jenkinsUrl: ""
  # If you set this prefix and use ingress controller then you might want to set the ingress path below
  # jenkinsUriPrefix: "/jenkins"
  # Enable pod security context (must be `true` if runAsUser or fsGroup are set)
  usePodSecurityContext: true
  # Set runAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.
  # When setting runAsUser to a different value than 0 also set fsGroup to the same value:
  runAsUser: 1000
  fsGroup: 1000
  servicePort: 8080
  targetPort: 8080
  # For minikube, set this to NodePort, elsewhere use LoadBalancer
  # Use ClusterIP if your setup includes ingress controller
  serviceType: ClusterIP
  # Jenkins master service annotations
  serviceAnnotations: 
  # Jenkins master custom labels
  deploymentLabels: {}
  #   foo: bar
  #   bar: foo
  # Jenkins master service labels
  serviceLabels: {}
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
  # Put labels on Jenkins master pod
  podLabels: {}
  # Used to create Ingress record (should used with ServiceType: ClusterIP)
  # nodePort: <to set explicitly, choose port between 30000-32767
  # Enable Kubernetes Liveness and Readiness Probes
  # ~ 2 minutes to allow Jenkins to restart when upgrading plugins. Set ReadinessTimeout to be shorter than LivenessTimeout.
  healthProbes: true
  healthProbesLivenessTimeout: 90
  healthProbesReadinessTimeout: 60
  healthProbeReadinessPeriodSeconds: 10
  healthProbeLivenessFailureThreshold: 12
  slaveListenerPort: 50000
  slaveHostPort:
  disabledAgentProtocols:
    - JNLP-connect
    - JNLP2-connect
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  cli: false
  # Kubernetes service type for the JNLP slave service
  # slaveListenerServiceType is the Kubernetes Service type for the JNLP slave service,
  # either 'LoadBalancer', 'NodePort', or 'ClusterIP'
  # Note if you set this to 'LoadBalancer', you *must* define annotations to secure it. By default
  # this will be an external load balancer and allowing inbound 0.0.0.0/0, a HUGE
  # security risk:  https://github.com/kubernetes/charts/issues/1341
  slaveListenerServiceType: "ClusterIP"
  slaveListenerServiceAnnotations: {}
  slaveKubernetesNamespace:

  # Example of 'LoadBalancer' type of slave listener with annotations securing it
  # slaveListenerServiceType: LoadBalancer
  # slaveListenerServiceAnnotations:
  #   service.beta.kubernetes.io/aws-load-balancer-internal: "True"
  #   service.beta.kubernetes.io/load-balancer-source-ranges: "172.0.0.0/8, 10.0.0.0/8"

  # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
  # set allowed inbound rules on the security group assigned to the master load balancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  # Optionally assign a known public LB IP
  # loadBalancerIP: 1.2.3.4
  # Optionally configure a JMX port
  # requires additional javaOpts, ie
  # javaOpts: >
  #   -Dcom.sun.management.jmxremote.port=4000
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -Dcom.sun.management.jmxremote.ssl=false
  # jmxPort: 4000
  # Optionally configure other ports to expose in the master container
  extraPorts:
  # - name: BuildInfoProxy
  #   port: 9000

  # List of plugins to be install during Jenkins master start
  installPlugins: []

  # Enable to always override the installed plugins with the values of 'master.installPlugins' on upgrade or redeployment.
  # overwritePlugins: true
  # Enable HTML parsing using OWASP Markup Formatter Plugin (antisamy-markup-formatter), useful with ghprb plugin.
  # The plugin is not installed by default, please update master.installPlugins.
  enableRawHtmlMarkupFormatter: false
  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  scriptApproval:
  #  - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
  #  - "new groovy.json.JsonSlurperClassic"
  # List of groovy init scripts to be executed during Jenkins master start
  initScripts:
  #  - |
  #    print 'adding global pipeline libraries, register properties, bootstrap jobs...'
  # Kubernetes secret that contains a 'credentials.xml' for Jenkins
  # credentialsXmlSecret: jenkins-credentials
  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,
  # useful to manage encryption keys used for credentials.xml for instance (such as
  # master.key and hudson.util.Secret)
  # secretsFilesSecret: jenkins-secrets
  # Jenkins XML job configs to provision
  jobs:
  #  test: |-
  #    <<xml here>>

  # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
  # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the master in
  # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
  # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
  # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
  JCasC:
    enabled: true
    pluginVersion: 1.14
    supportPluginVersion: 1.14
    configScripts:
      welcome-message: |
        jenkins:
          systemMessage: >-
              This jenkins is managed by configuration as code, update <a
              href="https://github.com/hmcts/cnp-jenkins-config/blob/master/cac-test.yml">here</a>
      env-vars: |
        jenkins:
          globalNodeProperties:
            - envVars:
                env:
                  - key: INFRA_VAULT_NAME
                    value: infra-vault-sandbox
                  - key: NONPROD_ENVIRONMENT_NAME
                    value: saat
                  - key: NONPROD_SUBSCRIPTION_NAME
                    value: sandbox
                  - key: PROD_ENVIRONMENT_NAME
                    value: sprod
                  - key: PROD_SUBSCRIPTION_NAME
                    value: sandbox
                  - key: JAVA_OPTS
                    value: -Xmx2g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
                  - key: GRADLE_OPTS
                    value: -Xmx2g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
      misc-jenkins-settings: |
        jenkins:
          crumbIssuer:
            standard:
              excludeClientIPFromCrumb: false
          markupFormatter:
            rawHtml:
              disableSyntaxHighlighting: false
          numExecutors: 0
      views: |
        jenkins:
          primaryView:
            all:
              name: all
          views:
            - all:
                name: all   
            - buildMonitor:
                includeRegex: >-
                  ^HMCTS_.*(Platform|CNP).*\/(draft-store|rpe-pdf-service|feature-toggle-api|private-beta-invitation-service|service-auth-provider-app|spring-boot-template|cnp-rhubarb-recipes-service|cnp-plum-recipes-service|cnp-plum-frontend|cnp-plum-shared-infrastructure)\/master
                name: Platform
                recurse: true
                title: Platform
      auth: |
        jenkins:
          # securityRealm:
          #   local:
          #     allowsSignup: false
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "Overall/Administer:authenticated"
                - "Overall/Administer:300e771f-856c-45cc-b899-40d78281e9c1"
                - "Overall/Read:authenticated"
                - "View/Create:authenticated"
                - "View/Read:authenticated"
                - "View/Configure:authenticated"
                - "View/Delete:authenticated"
                - "Agent/Create:authenticated"
                - "Agent/Build:authenticated"
                - "Agent/Connect:authenticated"
                - "Agent/Delete:authenticated"
                - "Agent/Configure:authenticated"
                - "Agent/Disconnect:authenticated"
                - "Run/Delete:authenticated"
                - "Run/Replay:authenticated"
                - "Run/Update:authenticated"
                - "Job/Configure:authenticated"
                - "Job/Cancel:authenticated"
                - "Job/Read:authenticated"
                - "Job/Build:authenticated"
                - "Job/Move:authenticated"
                - "Job/Discover:authenticated"
                - "Job/Discover:anonymous"
                - "Job/Create:authenticated"
                - "Job/Workspace:authenticated"
                - "Job/Delete:authenticated"
                - "Credentials/View:authenticated"
                - "Build Failure Analyzer/RemoveCause:authenticated"
                - "Build Failure Analyzer/UpdateCauses:authenticated"
                - "Build Failure Analyzer/ViewCauses:authenticated"
                - "Lockable Resources/Unlock:authenticated"
                - "Lockable Resources/Reserve:authenticated"
                - "SCM/Tag:authenticated"
      location: |
        unclassified:
          location:
            adminAddress: jenkins-reform@hmcts.net
            url: 'http://localhost:8091'
      global-library: |
        unclassified:
          globalLibraries:
            libraries:
              - name: 'Infrastructure'
                includeInChangesets: false
                defaultVersion: master
                retriever:
                  modernSCM:
                    scm:
                      github:
                        credentialsId: jenkins-github-hmcts-api-token
                        repoOwner: hmcts
                        repository: cnp-jenkins-library
              - name: 'Pipeline'
                includeInChangesets: false
                defaultVersion: master
                retriever:
                  modernSCM:
                    scm:
                      github:
                        credentialsId: jenkins-github-hmcts-api-token
                        repoOwner: hmcts
                        repository: cnp-jenkins-library
      slack: |
        unclassified:
          slackNotifier:
            teamDomain: hmcts-reform
            tokenCredentialId: slack-token
      github: |
        unclassified:
          githubpluginconfig:
            configs:
              - name: "GitHub"
                apiUrl: "https://api.github.com"
                credentialsId: "jenkins-github-hmcts-api-token-text"
                manageHooks: false
      azure-key-vault: |
        unclassified:
          azureKeyVault:
            keyVaultURL: https://infra-vault-sandbox.vault.azure.net
            credentialID: jenkinsServicePrincipal
      sonar: |
        unclassified:
          sonarglobalconfiguration:
            installations:
              - additionalAnalysisProperties: sonar.organization=hmcts
                name: SonarQube
                serverAuthenticationToken: '${sonarcloud-api-token}'
                serverUrl: 'https://sonarcloud.io'
      timestamper: |
        unclassified:
          timestamperConfig:
            allPipelines: true
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword:
                      scope: GLOBAL
                      id: jenkins-github-hmcts-api-token
                      username: jenkins-reform-cnp
                      password: '${hmcts-github-apikey-cnp}'
                      description: CNP jenkins github token
                  - string:
                      scope: GLOBAL
                      id: jenkins-github-hmcts-api-token-text
                      secret: '${hmcts-github-apikey-cnp}'
                      description: CNP jenkins github token
                  - string:
                      scope: GLOBAL
                      id: slack-token
                      secret: '${slack-token}'
                      description: Slack token
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token"
                      password: "${hmcts-github-apikey}"
                      scope: GLOBAL
                      username: "jenkins-reform-hmcts3"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_cmc"
                      password: "${hmcts-github-apikey-cmc}"
                      scope: GLOBAL
                      username: "jenkins-reform-cmc"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_div"
                      password: "${hmcts-github-apikey-div}"
                      scope: GLOBAL
                      username: "jenkins-reform-div"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_finrem"
                      password: "${hmcts-github-apikey-finrem}"
                      scope: GLOBAL
                      username: "jenkins-reform-finrem"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_cdm"
                      password: "${hmcts-github-apikey-cdm}"
                      scope: GLOBAL
                      username: "jenkins-reform-cdm"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_iac"
                      password: "${hmcts-github-apikey-iac}"
                      scope: GLOBAL
                      username: "jenkins-reform-iac"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_platform"
                      password: "${hmcts-github-apikey-platform}"
                      scope: GLOBAL
                      username: "jenkins-reform-platform"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_rpa"
                      password: "${hmcts-github-apikey-rpa}"
                      scope: GLOBAL
                      username: "jenkins-reform-rpa"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_sscs"
                      password: "${hmcts-github-apikey-sscs}"
                      scope: GLOBAL
                      username: "jenkins-reform-sscs"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_probate"
                      password: "${hmcts-github-apikey-probate}"
                      scope: GLOBAL
                      username: "jenkins-reform-probate"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_feepay"
                      password: "${hmcts-github-apikey-feepay}"
                      scope: GLOBAL
                      username: "jenkins-reform-feepay"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_sl"
                      password: "${hmcts-github-apikey-sl}"
                      scope: GLOBAL
                      username: "jenkins-reform-sl"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_cnp"
                      password: "${hmcts-github-apikey-cnp}"
                      scope: GLOBAL
                      username: "jenkins-reform-cnp"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_idam"
                      password: "${hmcts-github-apikey-idam}"
                      scope: GLOBAL
                      username: "jenkins-reform-idam"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_cet"
                      password: "${hmcts-github-apikey-cet}"
                      scope: GLOBAL
                      username: "jenkins-reform-cet"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_fpl"
                      password: "${hmcts-github-apikey-fpl}"
                      scope: GLOBAL
                      username: "jenkins-reform-fpl"
                  - usernamePassword:
                      description: "SSH credentials for Jenkins agents"
                      id: "vm_agent_creds"
                      password: "${mgmt-bastion-creds-password}"
                      scope: GLOBAL
                      username: "jenkinsssh"
                  - string:
                      description: "Read/Write Key To Publish CosmosDB Metrics"
                      id: "COSMOSDB_TOKEN_KEY"
                      scope: GLOBAL
                      secret: "${pipelinemetrics-cosmosdb-key}"
                  - usernamePassword:
                      description: "Username and password for the OWASP vulnerability database"
                      id: "owasp-db-login"
                      password: "${OWASPDb-Password}"
                      scope: GLOBAL
                      username: "owasp_administrator"
                  - usernamePassword:
                      description: "Storage account name and access key for storing build reports"
                      id: "buildlog-storage-account"
                      password: "${jenkins-build-logs-key}"
                      scope: GLOBAL
                      username: "mgmtbuildlogstoresandbox"
                  - sauce:
                      apiKey: "${sauce-access-key}"
                      description: "Sauce Labs Reform Key"
                      id: "reform_tunnel"
                      scope: GLOBAL
                      username: "reform"
                  - azure:
                      azureEnvironmentName: "Azure"
                      clientId: "${jenkins-sp-client-id}"
                      clientSecret: "${jenkins-sp-client-secret}"
                      description: "Jenkins Service Principal - only has access to infra key vault"
                      id: "jenkinsServicePrincipal"
                      scope: GLOBAL
                      subscriptionId: "${jenkins-sp-subscription-id}"
                      tenant: "${jenkins-sp-tenant-id}"
                  - usernamePassword:
                      description: "Jenkins-reform-am GitHub API token"
                      id: "jenkins-github-hmcts-api-token_am"
                      password: "${hmcts-github-apikey-am}"
                      scope: GLOBAL
                      username: "jenkins-reform-am"
                  - usernamePassword:
                      description: "Jenkins-reform-ctsc GitHub API token"
                      id: "jenkins-github-hmcts-api-token_ctsc"
                      password: "${hmcts-github-apikey-ctsc}"
                      scope: GLOBAL
                      username: "jenkins-reform-ctsc"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_ethos"
                      password: "${hmcts-github-apikey-ethos}"
                      scope: GLOBAL
                      username: "jenkins-reform-ethos"
                  - usernamePassword:
                      description: "Jenkins HMCTS GitHub credentials (Username/password format)"
                      id: "jenkins-github-hmcts-api-token_rd"
                      password: "${hmcts-github-apikey-rd}"
                      scope: GLOBAL
                      username: "jenkins-reform-rd"
      jobs: |
        jobs:
          - url: https://raw.githubusercontent.com/hmcts/cnp-jenkins-config/master/jobdsl/organisations-cnptest.groovy
  # Optionally specify additional init-containers
  customInitContainers: []
  # - name: custom-init
  #   image: "alpine:3.7"
  #   imagePullPolicy: Always
  #   command: [ "uname", "-a" ]

  sidecars:
    configAutoReload:
      # If enabled: true, Jenkins Configuration as Code will be reloaded on-the-fly without a reboot.  If false or not-specified,
      # jcasc changes will cause a reboot and will only be applied at the subsequent start-up.  Auto-reload uses the Jenkins CLI
      # over SSH to reapply config when changes to the configScripts are detected.  The admin user (or account you specify in
      # master.adminUser) will have a random SSH private key (RSA 4096) assigned unless you specify adminSshKey.  This will be saved to a k8s secret.
      enabled: true
      image: shadwell/k8s-sidecar:0.0.2
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 50m
          memory: 50Mi
      # SSH port value can be set to any unused TCP port.  The default, 1044, is a non-standard SSH port that has been chosen at random.
      # Is only used to reload jcasc config from the sidecar container running in the Jenkins master pod.
      # This TCP port will not be open in the pod (unless you specifically configure this), so Jenkins will not be
      # accessible via SSH from outside of the pod.  Note if you use non-root pod privileges (runAsUser & fsGroup),
      # this must be > 1024:
      sshTcpPort: 1044
      # folder in the pod that should hold the collected dashboards:
      folder: "/var/jenkins_home/casc_configs"
      # If specified, the sidecar will search for JCasC config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces:
      # searchNamespace:

    # Allows you to inject additional/other sidecars
    other:
    ## The example below runs the client for https://smee.io as sidecar container next to Jenkins,
    ## that allows to trigger build behind a secure firewall.
    ## https://jenkins.io/blog/2019/01/07/webhook-firewalls/#triggering-builds-with-webhooks-behind-a-secure-firewall
    ##
    ## Note: To use it you should go to https://smee.io/new and update the url to the generete one.
    # - name: smee
    #   image: docker.io/twalter/smee-client:1.0.2
    #   args: ["--port", "{{ .Values.master.servicePort }}", "--path", "/github-webhook/", "--url", "https://smee.io/new"]
    #   resources:
    #     limits:
    #       cpu: 50m
    #       memory: 128Mi
    #     requests:
    #       cpu: 10m
    #       memory: 32Mi
  # Node labels and tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  nodeSelector: {}
  tolerations: []
  # Leverage a priorityClass to ensure your pods survive resource shortages
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  # priorityClass: system-cluster-critical
  podAnnotations: {}

  # The below two configuration-related values are deprecated and replaced by Jenkins Configuration as Code (see above
  # JCasC key).  They will be deleted in an upcoming version.
  customConfigMap: false
  # By default, the configMap is only used to set the initial config the first time
  # that the chart is installed.  Setting `overwriteConfig` to `true` will overwrite
  # the jenkins config with the contents of the configMap every time the pod starts.
  # This will also overwrite all init scripts
  overwriteConfig: false

  # By default, the Jobs Map is only used to set the initial jobs the first time
  # that the chart is installed.  Setting `overwriteJobs` to `true` will overwrite
  # the jenkins jobs configuration with the contents of Jobs every time the pod starts.
  overwriteJobs: false

  ingress:
    enabled: true
    # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
    apiVersion: "extensions/v1beta1"
    labels: {}
    annotations:
      kubernetes.io/ingress.class: traefik
    # kubernetes.io/tls-acme: "true"
    # Set this path to jenkinsUriPrefix above or use annotations to rewrite path
    # path: "/jenkins"
    # configures the hostname e.g. jenkins.example.com
    hostName: jenkins-test.service.core-compute-sandbox.internal
    tls:
    # - secretName: jenkins.cluster.local
    #   hosts:
    #     - jenkins.cluster.local

  # Openshift route
  route:
    enabled: false
    labels: {}
    annotations: {}
    # path: "/jenkins"

  additionalConfig: {}

  # master.hostAliases allows for adding entries to Pod /etc/hosts:
  # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  hostAliases: []
  # - ip: 192.168.50.50
  #   hostnames:
  #     - something.local
  # - ip: 10.0.50.50
  #   hostnames:
  #     - other.local

agent:
  enabled: false
  image: "jenkins/jnlp-slave"
  imageTag: "3.27-1"
  customJenkinsLabels: []
  # name of the secret to be used for image pulling
  imagePullSecretName:
  componentName: "jenkins-slave"
  privileged: false
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"
  # You may want to change this to true while testing a new image
  alwaysPullImage: false
  # Controls how slave pods are retained after the Jenkins build completes
  # Possible values: Always, Never, OnFailure
  podRetention: "Never"
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  # Pod-wide ennvironment, these vars are visible to any container in the slave pod
  envVars:
  # - name: PATH
  #   value: /usr/local/bin
  volumes:
  # - type: Secret
  #   secretName: mysecret
  #   mountPath: /var/myapp/mysecret
  nodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

  # Executed command when side container gets started
  command:
  args:
  # Side container name
  sideContainerName: "jnlp"
  # Doesn't allocate pseudo TTY by default
  TTYEnabled: false
  # Max number of spawned agent
  containerCap: 10
  # Pod name
  podName: "default"
  # Allows the Pod to remain active for reuse until the configured number of
  # minutes has passed since the last step was executed on it.
  idleMinutes: 0
  # Raw yaml template for the Pod. For example this allows usage of toleration for agent pods.
  # https://github.com/jenkinsci/kubernetes-plugin#using-yaml-to-define-pod-templates
  # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  yamlTemplate:
  # yamlTemplate: |-
  #   apiVersion: v1
  #   kind: Pod
  #   spec:
  #     tolerations:
  #     - key: "key"
  #       operator: "Equal"
  #       value: "value"

persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass:
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "8Gi"
  volumes:
  - name: secrets
    flexVolume:
      driver: "azure/kv"
      secretRef:
        name: kvcreds # mounting point to the pod
      options:
        usepodidentity: "false"
        keyvaultname: "infra-vault-sandbox"
        keyvaultobjectnames: "slack-token;hmcts-github-apikey-cmc;hmcts-github-apikey-div;hmcts-github-apikey-finrem;hmcts-github-apikey-cdm;hmcts-github-apikey-iac;hmcts-github-apikey-platform;hmcts-github-apikey-rpa;hmcts-github-apikey-sscs;hmcts-github-apikey-probate;hmcts-github-apikey-feepay;hmcts-github-apikey-sl;hmcts-github-apikey-cnp;hmcts-github-apikey-idam;hmcts-github-apikey-cet;hmcts-github-apikey-fpl;hmcts-github-apikey-am;hmcts-github-apikey-ethos;hmcts-github-apikey-ctsc;hmcts-github-apikey-rd;hmcts-github-apikey;mgmt-bastion-creds-password;sonarcloud-api-token;pipelinemetrics-cosmosdb-key;OWASPDb-Password;jenkins-build-logs-key;sauce-access-key;bfa-user-password;jenkins-sp-subscription-id;jenkins-sp-client-id;jenkins-sp-client-secret;jenkins-sp-tenant-id"
        keyvaultobjecttypes: "secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret;secret" # OPTIONS: secret, key, cert
        resourcegroup: "cnp-core-infra"
        subscriptionid: "bf308a5c-0624-4334-8ff8-8dca9fd43783"
        tenantid: "531ff96d-0ae9-462a-8d2d-bec7c0b42082"
  mounts:
   - mountPath: /kvmnt/secrets
     name: secrets
     readOnly: true

networkPolicy:
  # Enable creation of NetworkPolicy resources.
  enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  apiVersion: networking.k8s.io/v1

## Install Default RBAC roles and bindings
rbac:
  create: true

serviceAccount:
  create: true
  # The name of the service account is autogenerated by default
  name:
  annotations: {}

serviceAccountAgent:
  # Specifies whether a ServiceAccount should be created
  create: false
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  annotations: {}

## Backup cronjob configuration
## Ref: https://github.com/nuvo/kube-tasks
backup:
  # Backup must use RBAC
  # So by enabling backup you are enabling RBAC specific for backup
  enabled: false
  # Used for label app.kubernetes.io/component
  componentName: "backup"
  # Schedule to run jobs. Must be in cron time format
  # Ref: https://crontab.guru/
  schedule: "0 2 * * *"
  annotations:
    # Example for authorization to AWS S3 using kube2iam
    # Can also be done using environment variables
    iam.amazonaws.com/role: "jenkins"
  image:
    repository: "nuvo/kube-tasks"
    tag: "0.1.2"
  # Additional arguments for kube-tasks
  # Ref: https://github.com/nuvo/kube-tasks#simple-backup
  extraArgs: []
  # Add additional environment variables
  env:
  # Example environment variable required for AWS credentials chain
  - name: "AWS_REGION"
    value: "us-east-1"
  resources:
    requests:
      memory: 1Gi
      cpu: 1
    limits:
      memory: 1Gi
      cpu: 1
  # Destination to store the backup artifacts
  # Supported cloud storage services: AWS S3, Minio S3, Azure Blob Storage
  # Additional support can added. Visit this repository for details
  # Ref: https://github.com/nuvo/skbn
  destination: "s3://nuvo-jenkins-data/backup"
checkDeprecation: true

