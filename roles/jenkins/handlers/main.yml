---
- name: restart jenkins
  service: name=jenkins state=restarted

- name: configure default users
  template:
    src: basic-security.groovy
    dest: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775
  register: jenkins_users_config

# Make sure Jenkins starts, then configure Jenkins.
- name: Check Jenkins is started
  service: name=jenkins state=started enabled=yes

  # updated this to wait 1 second if the service is still down
  # wait 5 seconds once it says it is up, so it can finish starting
  # otherwise strange issues were happening
- name: wait for jenkins to start
  shell: "curl --fail -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/  >/dev/null;  res=$?;  if [ \"$res\" -eq 0 ] || [ \"$res\" -eq 22 ]; then echo \"OK\"; fi && sleep 10 || sleep 1"
  #shell: "curl --fail -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/ && sleep 10 || sleep 1"
  register: result
  # until we get a 403 or (get a 200 ok and it has finished loading):
  #until: (result.stdout.find("403 Forbidden") != -1) or ((result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1))
  until: (result.stdout.find("OK"))
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  args:
    warn: no
  listen: "wait for jenkins to start"
  become: yes

- name: reload jenkins config
  jenkins_script:
    script: "Jenkins.instance.reload()"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
  listen: "reload jenkins config"
